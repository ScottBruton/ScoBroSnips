{
    "project_structure": [
        "eel.js",
        "home.html",
        "main.py",
        "pyFunctions\\appStateFunctions.py",
        "pyFunctions\\snippingFunction.py",
        "Scripts\\appState.js",
        "Scripts\\copyImageButton.js",
        "Scripts\\copyObjectButton.js",
        "Scripts\\extractButton.js",
        "Scripts\\home.js",
        "Scripts\\main.js",
        "Scripts\\rightPanel.js",
        "Scripts\\selectAllButton.js",
        "Scripts\\selectButton.js",
        "Styles\\homeStyle.css",
        "Styles\\rightPanelStyle.css"
    ],
    "code_files": {
        "eel.js": {
            "methods": [],
            "code": "eel = {\n    _host: window.location.origin,\n\n    set_host: function (hostname) {\n        eel._host = hostname\n    },\n\n    expose: function(f, name) {\n        if(name === undefined){\n            name = f.toString();\n            let i = 'function '.length, j = name.indexOf('(');\n            name = name.substring(i, j).trim();\n        }\n\n        eel._exposed_functions[name] = f;\n    },\n\n    guid: function() {\n        return eel._guid;\n    },\n\n    // These get dynamically added by library when file is served\n    /** _py_functions **/\n    /** _start_geometry **/\n\n    _guid: ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n        ),\n\n    _exposed_functions: {},\n\n    _mock_queue: [],\n\n    _mock_py_functions: function() {\n        for(let i = 0; i < eel._py_functions.length; i++) {\n            let name = eel._py_functions[i];\n            eel[name] = function() {\n                let call_object = eel._call_object(name, arguments);\n                eel._mock_queue.push(call_object);\n                return eel._call_return(call_object);\n            }\n        }\n    },\n\n    _import_py_function: function(name) {\n        let func_name = name;\n        eel[name] = function() {\n            let call_object = eel._call_object(func_name, arguments);\n            eel._websocket.send(eel._toJSON(call_object));\n            return eel._call_return(call_object);\n        }\n    },\n\n    _call_number: 0,\n\n    _call_return_callbacks: {},\n\n    _call_object: function(name, args) {\n        let arg_array = [];\n        for(let i = 0; i < args.length; i++){\n            arg_array.push(args[i]);\n        }\n\n        let call_id = (eel._call_number += 1) + Math.random();\n        return {'call': call_id, 'name': name, 'args': arg_array};\n    },\n\n    _sleep: function(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    },\n\n    _toJSON: function(obj) {\n        return JSON.stringify(obj, (k, v) => v === undefined ? null : v);\n    },\n\n    _call_return: function(call) {\n        return function(callback = null) {\n            if(callback != null) {\n                eel._call_return_callbacks[call.call] = {resolve: callback};\n            } else {\n                return new Promise(function(resolve, reject) {\n                    eel._call_return_callbacks[call.call] = {resolve: resolve, reject: reject};\n                });\n            }\n        }\n    },\n\n    _position_window: function(page) {\n        let size = eel._start_geometry['default'].size;\n        let position = eel._start_geometry['default'].position;\n\n        if(page in eel._start_geometry.pages) {\n            size = eel._start_geometry.pages[page].size;\n            position = eel._start_geometry.pages[page].position;\n        }\n\n        if(size != null){\n            window.resizeTo(size[0], size[1]);\n        }\n\n        if(position != null){\n            window.moveTo(position[0], position[1]);\n        }\n    },\n\n    _init: function() {\n        eel._mock_py_functions();\n\n        document.addEventListener(\"DOMContentLoaded\", function(event) {\n            let page = window.location.pathname.substring(1);\n            eel._position_window(page);\n\n            let websocket_addr = (eel._host + '/eel').replace('http', 'ws');\n            websocket_addr += ('?page=' + page);\n            eel._websocket = new WebSocket(websocket_addr);\n\n            eel._websocket.onopen = function() {\n                for(let i = 0; i < eel._py_functions.length; i++){\n                    let py_function = eel._py_functions[i];\n                    eel._import_py_function(py_function);\n                }\n\n                while(eel._mock_queue.length > 0) {\n                    let call = eel._mock_queue.shift();\n                    eel._websocket.send(eel._toJSON(call));\n                }\n            };\n\n            eel._websocket.onmessage = function (e) {\n                let message = JSON.parse(e.data);\n                if(message.hasOwnProperty('call') ) {\n                    // Python making a function call into us\n                    if(message.name in eel._exposed_functions) {\n                        try {\n                            let return_val = eel._exposed_functions[message.name](...message.args);\n                            eel._websocket.send(eel._toJSON({'return': message.call, 'status':'ok', 'value': return_val}));\n                        } catch(err) {\n                            debugger\n                            eel._websocket.send(eel._toJSON(\n                                {'return': message.call,\n                                'status':'error',\n                                'error': err.message,\n                                'stack': err.stack}));\n                        }\n                    }\n                } else if(message.hasOwnProperty('return')) {\n                    // Python returning a value to us\n                    if(message['return'] in eel._call_return_callbacks) {\n                        if(message['status']==='ok'){\n                            eel._call_return_callbacks[message['return']].resolve(message.value);\n                        }\n                        else if(message['status']==='error' &&  eel._call_return_callbacks[message['return']].reject) {\n                                eel._call_return_callbacks[message['return']].reject(message['error']);\n                        }\n                    }\n                } else {\n                    throw 'Invalid message ' + message;\n                }\n\n            };\n        });\n    }\n};\n\neel._init();\n\nif(typeof require !== 'undefined'){\n    // Avoid name collisions when using Electron, so jQuery etc work normally\n    window.nodeRequire = require;\n    delete window.require;\n    delete window.exports;\n    delete window.module;\n}\n"
        },
        "home.html": {
            "methods": [],
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ScoBro Snips</title>\n    <link rel=\"stylesheet\" href=\"Styles/homeStyle.css\">\n    <link rel=\"stylesheet\" href=\"Styles/rightPanelStyle.css\">\n    <script src=\"eel.js\"></script> <!-- Ensure eel.js is in the root project directory -->\n</head>\n<body>\n    <!-- Title bar outside the main container -->\n    <div class=\"container\">\n        <!-- Left Sidebar with Buttons -->\n        <div class=\"sidebar\">\n            <button id=\"extractButton\" class=\"icon-button\">\n                <img src=\"Media/icons/icn_extract.svg\" alt=\"Extract\">\n                Extract Objects\n            </button>\n            <button id=\"copyImageButton\" class=\"icon-button\">\n                <img src=\"Media/icons/icn_copyImage.svg\" alt=\"Copy Image\">\n                Copy Image\n            </button>\n            <button id=\"selectButton\" class=\"icon-button\">\n                <img src=\"Media/icons/icn_selectObjects.svg\" alt=\"Select\">\n                Select\n            </button>\n            <button id=\"selectAllButton\" class=\"icon-button\">\n                <img src=\"Media/icons/icn_selectAllObjects.svg\" alt=\"Select All\">\n                Select All\n            </button>\n            <button id=\"copyObjectButton\" class=\"icon-button\">\n                <img src=\"Media/icons/icn_copyObject.svg\" alt=\"Copy Object\">\n                Copy Object\n            </button>\n        </div>\n\n        <!-- Main content area -->\n        <div class=\"content\" id=\"mainContent\"></div>\n\n        <!-- Right Panel for Tools -->\n        <div class=\"right-panel\" id=\"rightPanel\">\n            <div class=\"center-title\">ScoBro Snips</div>\n            <div class=\"slider-container\">\n                <!-- JavaScript will dynamically insert the slider here -->\n            </div>\n        </div>\n    </div>\n\n    <!-- JavaScript files -->\n    <script src=\"Scripts/appState.js\" type=\"module\"></script>\n    <script src=\"Scripts/extractButton.js\" type=\"module\"></script>\n    <script src=\"Scripts/copyImageButton.js\" type=\"module\"></script>\n    <script src=\"Scripts/copyObjectButton.js\" type=\"module\"></script>\n    <script src=\"Scripts/selectAllButton.js\" type=\"module\"></script>\n    <script src=\"Scripts/selectButton.js\" type=\"module\"></script>\n    <script src=\"Scripts/main.js\" type=\"module\"></script>\n    <script src=\"Scripts/rightPanel.js\" type=\"module\"></script>\n    <script src=\"Scripts/home.js\" type=\"module\"></script>\n</body>\n</html>\n"
        },
        "main.py": {
            "methods": [
                "ensure_eel_js_exists",
                "hotkey_listener",
                "start_server",
                "create_window",
                "toggle_window",
                "exit_app",
                "setup_tray_icon_wx",
                "__init__",
                "my_python_function",
                "set_minimized_state",
                "get_minimized_state",
                "__init__",
                "CreatePopupMenu",
                "on_left_double_click",
                "on_right_click",
                "on_toggle_window",
                "on_exit"
            ],
            "code": "import eel \nimport webview\nimport threading\nimport http.server\nimport socketserver\nimport shutil \nimport os\nimport wx\nimport wx.adv\nimport traceback\nfrom PIL import Image\nimport keyboard\nfrom pyFunctions.snippingFunction import start_snipping_tool\nfrom pathlib import Path  \n\n# Automatically find and copy eel.js to the project directory\ndef ensure_eel_js_exists():\n    # Locate the original eel.js\n    eel_js_source = Path(eel.__file__).parent / 'eel.js'\n    eel_js_target = Path('.') / 'eel.js'\n    \n    # Copy eel.js to the project directory if it doesn't exist\n    if not eel_js_target.exists():\n        try:\n            shutil.copy(eel_js_source, eel_js_target)\n            print(\"Copied eel.js to project directory.\")\n        except Exception as e:\n            print(\"Error copying eel.js:\", e)\n            traceback.print_exc()\n\n# Call this function before starting the server to ensure eel.js is in the right place\nensure_eel_js_exists()\n\n\n# Initialize Eel with the folder containing your HTML files\neel.init(\".\")  # Replace \"web\" with the folder where your HTML files are located\n\n\n# Function to listen for the hotkey\ndef hotkey_listener():\n    keyboard.add_hotkey('ctrl+alt+s', start_snipping_tool)\n\n# Automatically find the directory where this script is located\ntry:\n    BASE_DIR = os.path.dirname(os.path.abspath(__file__))\n    DIRECTORY = BASE_DIR  # Path to SCOBROSNIPS folder\nexcept Exception as e:\n    print(\"Error determining base directory:\", e)\n    traceback.print_exc()\n    exit(1)\n\n# Set the port for the local server\nPORT = 8000\n\n# Define the path to the tray icon\nICON_PATH = os.path.join(BASE_DIR, \"Media\", \"icons\", \"trayIcon.ico\")\n\n# Python function to be exposed to JavaScript\nclass API:\n    def __init__(self):\n        self.minimizedToTray = True  # Start minimized by default\n\n    def my_python_function(self, value):\n        try:\n            print(f\"Python function called with value: {value}\")\n            return f\"Hello from Python! Received value: {value}\"\n        except Exception as e:\n            print(\"Error in my_python_function:\", e)\n            traceback.print_exc()\n\n    def set_minimized_state(self, minimized):\n        \"\"\"Updates the minimizedToTray state.\"\"\"\n        try:\n            self.minimizedToTray = minimized\n        except Exception as e:\n            print(\"Error setting minimized state:\", e)\n            traceback.print_exc()\n\n    def get_minimized_state(self):\n        \"\"\"Returns the current minimized state.\"\"\"\n        try:\n            return self.minimizedToTray\n        except Exception as e:\n            print(\"Error getting minimized state:\", e)\n            traceback.print_exc()\n            return True\n\napi = API()\n\n# Function to start a local server\ndef start_server():\n    try:\n        if not os.path.exists(DIRECTORY):\n            print(f\"Directory '{DIRECTORY}' does not exist. Please check the path.\")\n            exit(1)\n\n        os.chdir(DIRECTORY)\n        handler = http.server.SimpleHTTPRequestHandler\n        httpd = socketserver.TCPServer((\"\", PORT), handler)\n        print(f\"Serving at port {PORT}\")\n        httpd.serve_forever()\n    except Exception as e:\n        print(\"Error starting local server:\", e)\n        traceback.print_exc()\n        exit(1)\n\n# Initialize the PyWebView window\nwindow = None\n\ndef create_window():\n    global window\n    try:\n        window = webview.create_window(\n            'ScoBro Snips', f'http://localhost:{PORT}/home.html',\n            js_api=api, width=800, height=600, hidden=True  # Start hidden\n        )\n    except Exception as e:\n        print(\"Error creating PyWebView window:\", e)\n        traceback.print_exc()\n\n# Function to handle show/hide based on tray icon click\ndef toggle_window():\n    try:\n        minimized = api.get_minimized_state()\n        if minimized:\n            print(\"Showing window\")  # Debug print\n            window.show()\n            api.set_minimized_state(False)\n        else:\n            print(\"Hiding window\")  # Debug print\n            window.hide()\n            api.set_minimized_state(True)\n    except Exception as e:\n        print(\"Error toggling window visibility:\", e)\n        traceback.print_exc()\n\n# Function to exit the app cleanly\ndef exit_app():\n    try:\n        if window:\n            window.destroy()\n        wx.CallAfter(wx.GetApp().ExitMainLoop)  # Properly exit wxPython app\n    except Exception as e:\n        print(\"Error exiting the application:\", e)\n        traceback.print_exc()\n\n# wxPython App and TaskBarIcon for System Tray\ndef setup_tray_icon_wx(app):\n    try:\n        class TaskBarIcon(wx.adv.TaskBarIcon):\n            TBMENU_SHOW_HIDE = wx.NewIdRef()\n            TBMENU_EXIT = wx.NewIdRef()\n\n            def __init__(self, frame):\n                super(TaskBarIcon, self).__init__()\n                self.frame = frame\n\n                try:\n                    # Set the icon\n                    icon = wx.Icon(ICON_PATH, wx.BITMAP_TYPE_ICO)\n                    self.SetIcon(icon, \"ScoBro Snips\")\n                except Exception as e:\n                    print(\"Error setting tray icon:\", e)\n                    traceback.print_exc()\n\n                # Bind events\n                self.Bind(wx.adv.EVT_TASKBAR_LEFT_DCLICK, self.on_left_double_click)\n                self.Bind(wx.adv.EVT_TASKBAR_RIGHT_UP, self.on_right_click)\n\n            def CreatePopupMenu(self):\n                try:\n                    menu = wx.Menu()\n                    menu.Append(self.TBMENU_SHOW_HIDE, \"Show/Hide\")\n                    menu.AppendSeparator()\n                    menu.Append(self.TBMENU_EXIT, \"Exit\")\n\n                    # Bind menu events\n                    self.Bind(wx.EVT_MENU, self.on_toggle_window, id=self.TBMENU_SHOW_HIDE)\n                    self.Bind(wx.EVT_MENU, self.on_exit, id=self.TBMENU_EXIT)\n                    return menu\n                except Exception as e:\n                    print(\"Error creating popup menu:\", e)\n                    traceback.print_exc()\n\n            def on_left_double_click(self, event):\n                try:\n                    self.on_toggle_window(event)\n                except Exception as e:\n                    print(\"Error handling left double-click:\", e)\n                    traceback.print_exc()\n\n            def on_right_click(self, event):\n                try:\n                    self.PopupMenu(self.CreatePopupMenu())\n                except Exception as e:\n                    print(\"Error handling right-click:\", e)\n                    traceback.print_exc()\n\n            def on_toggle_window(self, event):\n                try:\n                    toggle_window()\n                except Exception as e:\n                    print(\"Error toggling window from tray icon:\", e)\n                    traceback.print_exc()\n\n            def on_exit(self, event):\n                try:\n                    exit_app()\n                except Exception as e:\n                    print(\"Error exiting from tray icon:\", e)\n                    traceback.print_exc()\n\n        frame = wx.Frame(None)\n        TaskBarIcon(frame)\n    except Exception as e:\n        print(\"Error setting up tray icon:\", e)\n        traceback.print_exc()\n\n# Run the application\n# Run the application\nif __name__ == \"__main__\":\n    try:\n        # Start the local server in a separate thread\n        server_thread = threading.Thread(target=start_server)\n        server_thread.daemon = True\n        server_thread.start()\n\n        # Start hotkey listener in a separate thread\n        hotkey_thread = threading.Thread(target=hotkey_listener)\n        hotkey_thread.daemon = True\n        hotkey_thread.start()\n\n        # Initialize wx App and set up the tray icon\n        app = wx.App(False)\n        setup_tray_icon_wx(app)\n\n        # Create the PyWebView window with debugging enabled\n        create_window()\n\n        # Start the PyWebView loop on the main thread with debugging\n        webview.start(debug=True, gui='wx')\n\n        # Start the wx main loop after webview is up\n        app.MainLoop()\n\n    except Exception as e:\n        print(\"Error running the main application:\", e)\n        traceback.print_exc()\n\n"
        },
        "pyFunctions\\appStateFunctions.py": {
            "methods": [
                "update_captured_image"
            ],
            "code": "# appStateFunctions.py\n\ncapturedImage = None \nenabledTool = None\nextractedEdgesOverlay = None \nselectedObjects = []\nobjectsFound = []\nminimizedToTray = False  # Corrected to uppercase 'False'\n\ndef update_captured_image(image):\n    global capturedImage\n    capturedImage = image  # Update captured image in appState\n"
        },
        "pyFunctions\\snippingFunction.py": {
            "methods": [
                "select_area",
                "capture_selected_area",
                "start_snipping_tool",
                "trigger_snipping_tool",
                "on_mouse_down",
                "on_mouse_drag",
                "on_mouse_up"
            ],
            "code": "import ctypes\nimport time\nimport cv2\nimport numpy as np\nfrom PIL import ImageGrab\nimport eel\nimport threading\nimport tkinter as tk\nfrom pyFunctions.appStateFunctions import update_captured_image\nimport base64\nfrom io import BytesIO\n\n\n\n# Set DPI awareness to handle high DPI scaling\nctypes.windll.shcore.SetProcessDpiAwareness(2)\n\n# Global variables to store the original images\nglobal original_image\nglobal original_snippet_image\n\n# Snipping function using Tkinter\ndef select_area():\n    root = tk.Tk()\n    root.attributes(\"-fullscreen\", True)\n    root.attributes(\"-alpha\", 0.3)\n    root.config(bg=\"black\")\n    root.after(10, lambda: root.focus_force())  # Bring the window to the foreground after a short delay\n    start_x = start_y = end_x = end_y = 0\n    rect = None\n\n    canvas = tk.Canvas(root, cursor=\"cross\")\n    canvas.pack(fill=\"both\", expand=True)\n\n    def on_mouse_down(event):\n        nonlocal start_x, start_y, rect\n        start_x = event.x_root\n        start_y = event.y_root\n        if rect:\n            canvas.delete(rect)\n        rect = canvas.create_rectangle(start_x, start_y, start_x, start_y, outline=\"red\", width=2)\n\n    def on_mouse_drag(event):\n        nonlocal rect, end_x, end_y\n        end_x = event.x_root\n        end_y = event.y_root\n        if rect:\n            canvas.delete(rect)\n        rect = canvas.create_rectangle(start_x, start_y, end_x, end_y, outline=\"red\", width=2)\n\n    def on_mouse_up(event):\n        root.quit()\n        root.destroy()\n        capture_selected_area(start_x, start_y, end_x, end_y)\n\n    canvas.bind(\"<ButtonPress-1>\", on_mouse_down)\n    canvas.bind(\"<B1-Motion>\", on_mouse_drag)\n    canvas.bind(\"<ButtonRelease-1>\", on_mouse_up)\n\n    root.mainloop()\n\n# Capture the selected area and convert it to OpenCV format\n\n\ndef capture_selected_area(x1, y1, x2, y2):\n    # Ensure the coordinates are in the correct order\n    x1, x2 = min(x1, x2), max(x1, x2)\n    y1, y2 = min(y1, y2), max(y1, y2)\n\n    # Add a small delay to ensure the screen is properly updated before capture\n    time.sleep(0.2)\n\n    # Grab the selected screen area\n    image = ImageGrab.grab(bbox=(x1, y1, x2, y2)).convert(\"RGBA\")\n    global original_snippet_image\n    original_snippet_image = image\n\n    # Convert the image to an OpenCV format\n    open_cv_image = cv2.cvtColor(np.array(image), cv2.COLOR_RGBA2BGR)\n    global original_image\n    original_image = open_cv_image.copy()\n\n    # Convert image to base64 data URL\n    buffered = BytesIO()\n    image.save(buffered, format=\"PNG\")\n    image_data = \"data:image/png;base64,\" + base64.b64encode(buffered.getvalue()).decode()\n\n    print(\"Calling displaySnippedImage with image data...\")\n    time.sleep(1)\n    eel.displaySnippedImage(image_data)\n\n# Eel function to call the snipping tool\ndef start_snipping_tool():\n    threading.Thread(target=select_area, daemon=True).start()\n\n# External function to trigger the snipping tool\ndef trigger_snipping_tool():\n    start_snipping_tool()\n"
        },
        "Scripts\\appState.js": {
            "methods": [],
            "code": "const appState = {\n    buttonsEnabled: {\n        extractButton: true,\n        copyImageButton: true,\n        copyObjectButton: false,\n        selectAllButton: false,\n        selectButton: false\n    },\n\n\n    enableButtonsAfterExtract() {\n        this.buttonsEnabled.copyObjectButton = true;\n        this.buttonsEnabled.selectAllButton = true;\n        this.buttonsEnabled.selectButton = true;\n    },\n\n    setMinimizedState(minimized) {\n        this.minimizedToTray = minimized;\n    }\n};\n\nexport default appState;\n"
        },
        "Scripts\\copyImageButton.js": {
            "methods": [],
            "code": "const copyImageButton = document.getElementById('copyImageButton');\ncopyImageButton.addEventListener('click', () => {\n    console.log(\"Copy Image button clicked!\");\n    // Additional logic for copying image goes here.\n});\n"
        },
        "Scripts\\copyObjectButton.js": {
            "methods": [],
            "code": ""
        },
        "Scripts\\extractButton.js": {
            "methods": [],
            "code": "import appState from './appState.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const extractButton = document.getElementById('extractButton');\n    const copyObjectButton = document.getElementById('copyObjectButton');\n    const selectAllButton = document.getElementById('selectAllButton');\n    const selectButton = document.getElementById('selectButton');\n\n    // Check if elements are loaded\n    if (!extractButton || !copyObjectButton || !selectAllButton || !selectButton) {\n        console.error(\"One or more buttons not found.\");\n        return;\n    }\n\n    // Event listener for Extract Objects button\n    extractButton.addEventListener('click', () => {\n        console.log(\"Extract Objects button clicked!\");\n\n        // Hardcoded testing logic to set booleans to true and enable visibility\n        appState.buttonsEnabled.copyObjectButton = true;\n        appState.buttonsEnabled.selectAllButton = true;\n        appState.buttonsEnabled.selectButton = true;\n\n        // Show and animate other buttons\n        [copyObjectButton, selectAllButton, selectButton].forEach(button => {\n            button.classList.remove('hidden'); // Make them visible\n            button.classList.add('fade-in'); // Apply fade-in animation\n            button.disabled = false; // Enable the button\n        });\n    });\n});\n"
        },
        "Scripts\\home.js": {
            "methods": [],
            "code": "// Function to display snipped image in the main content area\nwindow.onload = function() {\n    function displaySnippedImage(imageData) {\n        console.log(\"displaySnippedImage called\");  // Log when the function is called\n        console.log(\"Received image data:\", imageData);  // Log the image data to verify format\n\n        const contentArea = document.getElementById('mainContent');\n        if (!contentArea) {\n            console.error(\"mainContent element not found!\");  // Log an error if the element isn't found\n            return;\n        }\n\n        const img = new Image();\n        img.src = imageData;  // Expecting imageData to be a data URL (e.g., base64 encoded PNG)\n        img.onload = () => console.log(\"Image loaded successfully\");  // Confirm when image loads successfully\n        img.onerror = (error) => console.error(\"Error loading image:\", error);  // Log any loading errors\n\n        contentArea.innerHTML = '';  // Clear previous content\n        contentArea.appendChild(img);  // Insert the new image\n    }\n\n    // Expose displaySnippedImage to Eel so it can be called from Python\n    if (typeof eel !== 'undefined') {\n        eel.expose(displaySnippedImage);\n    } else {\n        console.error(\"Eel is not defined. Make sure eel.js is loaded correctly.\");\n    }\n};\n\n// Example function for handling button click\nfunction copyImage() {\n    if (typeof eel !== 'undefined') {\n        eel.copy_image()();  // Calls Python function named `copy_image`\n    } else {\n        console.error(\"Eel is not defined. Make sure eel.js is loaded correctly.\");\n    }\n}\n\n// Add event listeners to buttons\ndocument.querySelectorAll('.icon-button').forEach((button, index) => {\n    button.addEventListener('click', () => {\n        console.log(`Button ${index + 1} clicked`);\n        // You can add individual actions based on index or button text\n    });\n});\n"
        },
        "Scripts\\main.js": {
            "methods": [],
            "code": "import appState from './appState.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const extractButton = document.getElementById('extractButton');\n    const copyImageButton = document.getElementById('copyImageButton');\n    const copyObjectButton = document.getElementById('copyObjectButton');\n    const selectAllButton = document.getElementById('selectAllButton');\n    const selectButton = document.getElementById('selectButton');\n\n    // Initialize buttons based on state\n    function initializeButtons() {\n        extractButton.disabled = !appState.buttonsEnabled.extractButton;\n        copyImageButton.disabled = !appState.buttonsEnabled.copyImageButton;\n\n        // Set initial visibility and fade-in classes\n        if (!appState.buttonsEnabled.copyObjectButton) copyObjectButton.classList.add('hidden');\n        if (!appState.buttonsEnabled.selectAllButton) selectAllButton.classList.add('hidden');\n        if (!appState.buttonsEnabled.selectButton) selectButton.classList.add('hidden');\n    }\n\n    // Function to show buttons with fade-in effect\n    function showButtonsWithFadeIn() {\n        // Hardcoded testing logic to set booleans to true and enable visibility\n        appState.buttonsEnabled.copyObjectButton = true;\n        appState.buttonsEnabled.selectAllButton = true;\n        appState.buttonsEnabled.selectButton = true;\n\n        // Show and animate other buttons\n        [copyObjectButton, selectAllButton, selectButton].forEach(button => {\n            button.classList.remove('hidden'); // Make them visible\n            button.classList.add('fade-in'); // Apply fade-in animation\n            button.disabled = false; // Enable the button\n        });\n    }\n\n    // Add event listener to Extract Objects button\n    extractButton.addEventListener('click', () => {\n        console.log(\"Extract Objects button clicked!\");\n        showButtonsWithFadeIn();\n    });\n\n    initializeButtons();\n});\n"
        },
        "Scripts\\rightPanel.js": {
            "methods": [],
            "code": "function showEdgeThicknessSlider() {\n    const rightPanel = document.getElementById('rightPanel');\n\n    // Clear the panel content\n    rightPanel.innerHTML = '';\n\n    // Create and add the ScoBro Snips title\n    const title = document.createElement('div');\n    title.className = 'center-title';\n    title.textContent = 'ScoBro Snips';\n    rightPanel.appendChild(title);\n\n    // Create and add the Edge Thickness label\n    const label = document.createElement('div');\n    label.className = 'slider-label';\n    label.textContent = 'Edge Thickness';\n    rightPanel.appendChild(label);\n\n    // Create a container for the custom vertical slider\n    const sliderContainer = document.createElement('div');\n    sliderContainer.className = 'custom-vertical-slider';\n\n    // Create the slider track\n    const sliderTrack = document.createElement('div');\n    sliderTrack.className = 'slider-track';\n    sliderContainer.appendChild(sliderTrack);\n\n const firstMarkerOffset = 10; // Starting position of the first marker, 10px from the top\nconst totalMarkers = 10;\nconst thumbHeight = 10; // Adjust based on half the thumb's total height\n\nfor (let i = 0; i < totalMarkers; i++) {\n    const marker = document.createElement('div');\n    marker.className = 'slider-marker';\n\n    // Calculate marker position with the first marker at 10px from the top and evenly spaced down\n    const markerPosition = `calc(${firstMarkerOffset}px + ${(i / (totalMarkers - 1)) * (100 - firstMarkerOffset + 5.5)}%)`;\n    marker.style.top = markerPosition;\n\n    sliderTrack.appendChild(marker);\n}\n    // Create the green progress element\n    const sliderProgress = document.createElement('div');\n    sliderProgress.className = 'slider-progress';\n    sliderTrack.appendChild(sliderProgress);\n\n    // Create the slider thumb\n    const sliderThumb = document.createElement('div');\n    sliderThumb.className = 'slider-thumb';\n    sliderTrack.appendChild(sliderThumb);\n\n    // Append the container to the panel\n    rightPanel.appendChild(sliderContainer);\n\n    // Create and add the value display\n    const valueDisplay = document.createElement('div');\n    valueDisplay.className = 'slider-value';\n    valueDisplay.id = 'edgeThicknessValue';\n    rightPanel.appendChild(valueDisplay);\n\n    // Initial value\n    let initialValue = 1;\n    updateSliderValue(initialValue);\n\n    // Handle dragging of the slider thumb\n    let isDragging = false;\n\n    sliderThumb.addEventListener('mousedown', () => {\n        isDragging = true;\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    });\n\n    function onMouseMove(event) {\n        if (isDragging) {\n            const sliderRect = sliderTrack.getBoundingClientRect();\n            let newTop = event.clientY - sliderRect.top;\n\n            // Constrain to bounds and calculate nearest snap point\n            newTop = Math.max(0, Math.min(newTop, sliderRect.height - sliderThumb.offsetHeight));\n            const snapValue = Math.round((newTop / (sliderRect.height - sliderThumb.offsetHeight)) * 9) + 1;\n            const snapTop = ((snapValue - 1) / 9) * (sliderRect.height - sliderThumb.offsetHeight);\n\n            // Update thumb, progress, and value display\n            sliderThumb.style.top = `${snapTop}px`;\n            sliderProgress.style.height = `${snapTop + sliderThumb.offsetHeight / 2}px`;\n            sliderProgress.style.top = \"0px\";\n            valueDisplay.textContent = `${snapValue}px`;\n        }\n    }\n\n    function onMouseUp() {\n        isDragging = false;\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n    }\n\n    function updateSliderValue(value) {\n        const sliderRect = sliderTrack.getBoundingClientRect();\n        const maxTop = sliderRect.height - sliderThumb.offsetHeight;\n        const newTop = ((value - 1) / 9) * maxTop;\n\n        sliderThumb.style.top = `${newTop}px`;\n        sliderProgress.style.height = `${newTop + sliderThumb.offsetHeight / 2}px`;\n        sliderProgress.style.top = \"0px\";\n        valueDisplay.textContent = `${value}px`;\n    }\n}\n\n// Initialize the custom slider and title when the page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n    showEdgeThicknessSlider();\n});\n"
        },
        "Scripts\\selectAllButton.js": {
            "methods": [],
            "code": ""
        },
        "Scripts\\selectButton.js": {
            "methods": [],
            "code": ""
        },
        "Styles\\homeStyle.css": {
            "methods": [],
            "code": "/* General Reset */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n.container {\n    display: flex;\n    height: 100vh;\n    flex-direction: row; /* Align sidebar and content side-by-side */\n}\n\n/* Title Bar Styling */\n/* Title Bar Styling */\n/* Title Bar Styling */\n.title-bar {\n    position: fixed;\n    top: 20px; /* Adjust to move it down slightly if needed */\n    right: 20px;\n    background-color: #333;\n    color: #fff;\n    padding: 5px 10px;\n    border-radius: 8px;\n    font-size: 16px;\n    font-weight: bold;\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n    z-index: 1000; /* Ensure it stays above other elements */\n    text-align: center;\n}\n\n/* Main Content Area Styling */\n.content {\n    flex: 1;\n    background-color: #f0f0f0; /* Light gray background */\n    display: flex;\n    justify-content: center; /* Center horizontally */\n    align-items: center; /* Center vertically */\n}\n\n/* Centered Title Styling */\n.center-title {\n    background-color: #333;\n    color: #fff;\n    padding: 5px 10px;\n    border-radius: 8px;\n    font-size: 24px; /* Adjust font size as needed */\n    font-weight: bold;\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n    text-align: center;\n}\n\n\n/* Sidebar styling */\n.sidebar {\n    background-color: #333;\n    width: 100px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-top: 20px;\n    height: 100%;\n    box-shadow: 4px 0px 10px rgba(0, 0, 0, 0.3); /* Shadow for sidebar */\n}\n\n\n.icon-button {\n    background-color: #bfbfbf; /* Button background color */\n    color: #333; /* Text color */\n    border: none;\n    margin: 10px 0;\n    padding: 10px;\n    border-radius: 8px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    width: 80px;\n    cursor: pointer;\n    box-shadow: 0px 4px 8px rgba(224, 224, 224, 0.2); /* Shadow for button */\n    transition: transform 0.2s, box-shadow 0.2s;\n    opacity: 1;\n    transition: opacity 0.5s ease;\n}\n\n/* Hover effect to lift the button */\n.icon-button:hover {\n    background-color: rgb(199, 249, 255); /* Change background color on hover */\n    transform: translateY(-2px); /* Slight lift effect */\n    box-shadow: 0px 8px 12px rgba(190, 255, 247, 0.3); /* Enhanced shadow on hover */\n}\n\n.icon-button img {\n    width: 32px; /* Adjust as needed */\n    height: 32px;\n    margin-bottom: 5px;\n}\n\n/* Hidden buttons */\n.hidden {\n    visibility: hidden; /* Use visibility instead of display */\n    opacity: 0;\n}\n\n.icon-button.fade-in {\n    visibility: visible; /* Make the button visible */\n    opacity: 0; /* Start faded out */\n    animation: fadeIn 0.5s forwards; /* Fade-in animation */\n}\n\n/* Keyframes for fadeIn */\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n\n/* Main content area */\n.content {\n    flex: 1;\n    background-color: #f4f4f4;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n/* Main display area */\n.main-display {\n    width: 80%;\n    height: 80%;\n    background-color: #fff;\n    border: 1px solid #ccc;\n    border-radius: 15px;\n    margin-top: 20px;\n}\n"
        },
        "Styles\\rightPanelStyle.css": {
            "methods": [],
            "code": "/* Right Panel Styling */\n.right-panel {\n    width: 150px;\n    background-color: #333;\n    color: white;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: -4px 0px 10px rgba(0, 0, 0, 0.3);\n}\n\n/* Centered Title Styling */\n.center-title {\n    font-size: 13px;\n    font-weight: bold;\n    color: #fff;\n    margin-bottom: 20px;\n    text-align: center;\n}\n\n/* Custom Vertical Slider */\n.custom-vertical-slider {\n    height: calc(100vh - 100px); /* Stretch to fit available height */\n    width: 20px;\n    position: relative;\n    margin: 20px 0;\n}\n\n.slider-track {\n    width: 100%;\n    height: 100%;\n    background-color: #888;\n    position: relative;\n    border-radius: 10px;\n}\n\n.slider-thumb {\n    width: 20px;\n    height: 20px;\n    background-color: #555;\n    border-radius: 50%;\n    position: absolute;\n    left: 0;\n    cursor: pointer;\n}\n\n.slider-progress {\n    width: 100%;\n    height: 0; /* Start with no height */\n    background-color: #00ff00; /* Green color for the filled portion */\n    position: absolute;\n    bottom: 0;\n    border-radius: 10px;\n}\n/* Adjusted Marker Styling */\n.slider-marker {\n    position: absolute;\n    width: 8px; /* Length of each marker line */\n    height: 2px; /* Thickness of each marker line */\n    background-color: white;\n    left: -10px; /* Position the left marker line slightly to the left */\n    /* Shift each marker down by 10px */\n}\n\n.slider-marker::after {\n    content: '';\n    position: absolute;\n    width: 8px; /* Length of the second marker line */\n    height: 2px;\n    background-color: white;\n    right: -30px; /* Position the right marker line slightly to the right */\n    \n}\n"
        }
    }
}
{
    "project_structure": [
        "home.html",
        "main.py",
        "Scripts\\appState.js",
        "Scripts\\copyImageButton.js",
        "Scripts\\copyObjectButton.js",
        "Scripts\\extractButton.js",
        "Scripts\\home.js",
        "Scripts\\main.js",
        "Scripts\\rightPanel.js",
        "Scripts\\selectAllButton.js",
        "Scripts\\selectButton.js",
        "Styles\\homeStyle.css",
        "Styles\\rightPanelStyle.css"
    ],
    "code_files": {
        "home.html": {
            "methods": [],
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ScoBro Snips</title>\n    <link rel=\"stylesheet\" href=\"Styles/homeStyle.css\">\n    <link rel=\"stylesheet\" href=\"Styles/rightPanelStyle.css\">\n</head>\n<body>\n    <!-- Title bar outside the main container -->\n    <div class=\"container\">\n        <!-- Left Sidebar with Buttons -->\n        <div class=\"sidebar\">\n            <button id=\"extractButton\" class=\"icon-button\">\n                <img src=\"Media/icons/icn_extract.svg\" alt=\"Extract\">\n                Extract Objects\n            </button>\n            <button id=\"copyImageButton\" class=\"icon-button\">\n                <img src=\"Media/icons/icn_copyImage.svg\" alt=\"Copy Image\">\n                Copy Image\n            </button>\n            <button id=\"selectButton\" class=\"icon-button\">\n                <img src=\"Media/icons/icn_selectObjects.svg\" alt=\"Select\">\n                Select\n            </button>\n            <button id=\"selectAllButton\" class=\"icon-button\">\n                <img src=\"Media/icons/icn_selectAllObjects.svg\" alt=\"Select All\">\n                Select All\n            </button>\n            <button id=\"copyObjectButton\" class=\"icon-button\">\n                <img src=\"Media/icons/icn_copyObject.svg\" alt=\"Copy Object\">\n                Copy Object\n            </button>\n        </div>\n\n        <!-- Main content area -->\n        <!-- Main content area (light gray) -->\n        <div class=\"content\"></div>\n\n        <!-- Right Panel for Tools -->\n        <div class=\"right-panel\" id=\"rightPanel\">\n            <!-- Title at the top of the right panel -->\n            <div class=\"center-title\">ScoBro Snips</div>\n            <!-- Placeholder for the slider that will be generated by JavaScript -->\n            <div class=\"slider-container\">\n                <!-- Slider will go here -->\n            </div>\n        </div>\n    </div>\n\n    <!-- JavaScript files -->\n    <script src=\"Scripts/appState.js\" type=\"module\"></script>\n    <script src=\"Scripts/extractButton.js\" type=\"module\"></script>\n    <script src=\"Scripts/copyImageButton.js\" type=\"module\"></script>\n    <script src=\"Scripts/copyObjectButton.js\" type=\"module\"></script>\n    <script src=\"Scripts/selectAllButton.js\" type=\"module\"></script>\n    <script src=\"Scripts/selectButton.js\" type=\"module\"></script>\n    <script src=\"Scripts/main.js\" type=\"module\"></script>\n    <script src=\"Scripts/rightPanel.js\" type=\"module\"></script>\n</body>\n</html>\n"
        },
        "main.py": {
            "methods": [
                "start_server"
            ],
            "code": "import webview\nimport threading\nimport http.server\nimport socketserver\nimport os\n\n# Automatically find the directory where this script is located\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\nDIRECTORY = BASE_DIR # Path to SCOBROSNIPS folder\n\n# Set the port for the local server\nPORT = 8000\n\n# Step 1: Create a function to start a local server\ndef start_server():\n    # Check if DIRECTORY exists\n    if not os.path.exists(DIRECTORY):\n        print(f\"Directory '{DIRECTORY}' does not exist. Please check the path.\")\n        exit(1)  # Exit if the directory doesn't exist\n\n    os.chdir(DIRECTORY)\n    handler = http.server.SimpleHTTPRequestHandler\n    httpd = socketserver.TCPServer((\"\", PORT), handler)\n    print(f\"Serving at port {PORT}\")\n    httpd.serve_forever()\n\n# Step 2: Start the server in a separate thread\nserver_thread = threading.Thread(target=start_server)\nserver_thread.daemon = True  # Ensures it exits when the main program exits\nserver_thread.start()\n\n# Step 3: Open the HTML interface in PyWebView\nwebview.create_window('ScoBro Snips', f'http://localhost:{PORT}/home.html', width=800, height=600)\nwebview.start()\n"
        },
        "Scripts\\appState.js": {
            "methods": [],
            "code": "// appState.js\nconst appState = {\n    buttonsEnabled: {\n        extractButton: true,\n        copyImageButton: true,\n        copyObjectButton: false,\n        selectAllButton: false,\n        selectButton: false\n    },\n    enableButtonsAfterExtract() {\n        this.buttonsEnabled.copyObjectButton = true;\n        this.buttonsEnabled.selectAllButton = true;\n        this.buttonsEnabled.selectButton = true;\n    }\n};\n\nexport default appState;\n"
        },
        "Scripts\\copyImageButton.js": {
            "methods": [],
            "code": "const copyImageButton = document.getElementById('copyImageButton');\ncopyImageButton.addEventListener('click', () => {\n    console.log(\"Copy Image button clicked!\");\n    // Additional logic for copying image goes here.\n});\n"
        },
        "Scripts\\copyObjectButton.js": {
            "methods": [],
            "code": ""
        },
        "Scripts\\extractButton.js": {
            "methods": [],
            "code": "import appState from './appState.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const extractButton = document.getElementById('extractButton');\n    const copyObjectButton = document.getElementById('copyObjectButton');\n    const selectAllButton = document.getElementById('selectAllButton');\n    const selectButton = document.getElementById('selectButton');\n\n    // Check if elements are loaded\n    if (!extractButton || !copyObjectButton || !selectAllButton || !selectButton) {\n        console.error(\"One or more buttons not found.\");\n        return;\n    }\n\n    // Event listener for Extract Objects button\n    extractButton.addEventListener('click', () => {\n        console.log(\"Extract Objects button clicked!\");\n\n        // Hardcoded testing logic to set booleans to true and enable visibility\n        appState.buttonsEnabled.copyObjectButton = true;\n        appState.buttonsEnabled.selectAllButton = true;\n        appState.buttonsEnabled.selectButton = true;\n\n        // Show and animate other buttons\n        [copyObjectButton, selectAllButton, selectButton].forEach(button => {\n            button.classList.remove('hidden'); // Make them visible\n            button.classList.add('fade-in'); // Apply fade-in animation\n            button.disabled = false; // Enable the button\n        });\n    });\n});\n"
        },
        "Scripts\\home.js": {
            "methods": [],
            "code": "// Example function for handling button click\nfunction copyImage() {\n    eel.copy_image()();  // Calls Python function named `copy_image`\n}\n\n// Add event listeners to buttons\ndocument.querySelectorAll('.sidebar-btn').forEach((button, index) => {\n    button.addEventListener('click', () => {\n        console.log(`Button ${index + 1} clicked`);\n        // You can add individual actions based on index or button text\n    });\n});\n"
        },
        "Scripts\\main.js": {
            "methods": [],
            "code": "import appState from './appState.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const extractButton = document.getElementById('extractButton');\n    const copyImageButton = document.getElementById('copyImageButton');\n    const copyObjectButton = document.getElementById('copyObjectButton');\n    const selectAllButton = document.getElementById('selectAllButton');\n    const selectButton = document.getElementById('selectButton');\n\n    // Initialize buttons based on state\n    function initializeButtons() {\n        extractButton.disabled = !appState.buttonsEnabled.extractButton;\n        copyImageButton.disabled = !appState.buttonsEnabled.copyImageButton;\n\n        // Set initial visibility and fade-in classes\n        if (!appState.buttonsEnabled.copyObjectButton) copyObjectButton.classList.add('hidden');\n        if (!appState.buttonsEnabled.selectAllButton) selectAllButton.classList.add('hidden');\n        if (!appState.buttonsEnabled.selectButton) selectButton.classList.add('hidden');\n    }\n\n    // Function to show buttons with fade-in effect\n    function showButtonsWithFadeIn() {\n        // Hardcoded testing logic to set booleans to true and enable visibility\n        appState.buttonsEnabled.copyObjectButton = true;\n        appState.buttonsEnabled.selectAllButton = true;\n        appState.buttonsEnabled.selectButton = true;\n\n        // Show and animate other buttons\n        [copyObjectButton, selectAllButton, selectButton].forEach(button => {\n            button.classList.remove('hidden'); // Make them visible\n            button.classList.add('fade-in'); // Apply fade-in animation\n            button.disabled = false; // Enable the button\n        });\n    }\n\n    // Add event listener to Extract Objects button\n    extractButton.addEventListener('click', () => {\n        console.log(\"Extract Objects button clicked!\");\n        showButtonsWithFadeIn();\n    });\n\n    initializeButtons();\n});\n"
        },
        "Scripts\\rightPanel.js": {
            "methods": [],
            "code": "// Function to create and show the Edge Thickness custom slider in the right panel\nfunction showEdgeThicknessSlider() {\n    const rightPanel = document.getElementById('rightPanel');\n\n    // Clear the panel content\n    rightPanel.innerHTML = '';\n\n    // Create and add the Edge Thickness label\n    const label = document.createElement('div');\n    label.className = 'slider-label';\n    label.textContent = 'Edge Thickness';\n    rightPanel.appendChild(label);\n\n    // Create a container for the custom vertical slider\n    const sliderContainer = document.createElement('div');\n    sliderContainer.className = 'custom-vertical-slider';\n\n    // Create the slider track\n    const sliderTrack = document.createElement('div');\n    sliderTrack.className = 'slider-track';\n    sliderContainer.appendChild(sliderTrack);\n\n    // Create the slider thumb\n    const sliderThumb = document.createElement('div');\n    sliderThumb.className = 'slider-thumb';\n    sliderTrack.appendChild(sliderThumb);\n\n    // Append the container to the panel\n    rightPanel.appendChild(sliderContainer);\n\n    // Create and add the value display\n    const valueDisplay = document.createElement('div');\n    valueDisplay.className = 'slider-value';\n    valueDisplay.id = 'edgeThicknessValue';\n    valueDisplay.textContent = 50; // Default value\n    rightPanel.appendChild(valueDisplay);\n\n    // Handle dragging of the slider thumb\n    let isDragging = false;\n\n    sliderThumb.addEventListener('mousedown', (event) => {\n        isDragging = true;\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    });\n\n    function onMouseMove(event) {\n        if (isDragging) {\n            // Calculate the new position of the slider thumb\n            const sliderRect = sliderTrack.getBoundingClientRect();\n            let newTop = event.clientY - sliderRect.top;\n            \n            // Constrain the thumb position within the track bounds\n            newTop = Math.max(0, Math.min(newTop, sliderRect.height - sliderThumb.offsetHeight));\n\n            // Update thumb position and value display\n            sliderThumb.style.top = `${newTop}px`;\n            const sliderValue = Math.round((100 - (newTop / (sliderRect.height - sliderThumb.offsetHeight)) * 100));\n            valueDisplay.textContent = sliderValue;\n        }\n    }\n\n    function onMouseUp() {\n        isDragging = false;\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n    }\n}\n\n// Initialize the custom slider when the page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n    showEdgeThicknessSlider();\n});\n"
        },
        "Scripts\\selectAllButton.js": {
            "methods": [],
            "code": ""
        },
        "Scripts\\selectButton.js": {
            "methods": [],
            "code": ""
        },
        "Styles\\homeStyle.css": {
            "methods": [],
            "code": "/* General Reset */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n.container {\n    display: flex;\n    height: 100vh;\n    flex-direction: row; /* Align sidebar and content side-by-side */\n}\n\n/* Title Bar Styling */\n/* Title Bar Styling */\n/* Title Bar Styling */\n.title-bar {\n    position: fixed;\n    top: 20px; /* Adjust to move it down slightly if needed */\n    right: 20px;\n    background-color: #333;\n    color: #fff;\n    padding: 5px 10px;\n    border-radius: 8px;\n    font-size: 16px;\n    font-weight: bold;\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n    z-index: 1000; /* Ensure it stays above other elements */\n    text-align: center;\n}\n\n/* Main Content Area Styling */\n.content {\n    flex: 1;\n    background-color: #f0f0f0; /* Light gray background */\n    display: flex;\n    justify-content: center; /* Center horizontally */\n    align-items: center; /* Center vertically */\n}\n\n/* Centered Title Styling */\n.center-title {\n    background-color: #333;\n    color: #fff;\n    padding: 5px 10px;\n    border-radius: 8px;\n    font-size: 24px; /* Adjust font size as needed */\n    font-weight: bold;\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n    text-align: center;\n}\n\n\n/* Sidebar styling */\n.sidebar {\n    background-color: #333;\n    width: 100px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-top: 20px;\n    height: 100%;\n    box-shadow: 4px 0px 10px rgba(0, 0, 0, 0.3); /* Shadow for sidebar */\n}\n\n\n.icon-button {\n    background-color: #bfbfbf; /* Button background color */\n    color: #333; /* Text color */\n    border: none;\n    margin: 10px 0;\n    padding: 10px;\n    border-radius: 8px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    width: 80px;\n    cursor: pointer;\n    box-shadow: 0px 4px 8px rgba(224, 224, 224, 0.2); /* Shadow for button */\n    transition: transform 0.2s, box-shadow 0.2s;\n    opacity: 1;\n    transition: opacity 0.5s ease;\n}\n\n/* Hover effect to lift the button */\n.icon-button:hover {\n    background-color: rgb(199, 249, 255); /* Change background color on hover */\n    transform: translateY(-2px); /* Slight lift effect */\n    box-shadow: 0px 8px 12px rgba(190, 255, 247, 0.3); /* Enhanced shadow on hover */\n}\n\n.icon-button img {\n    width: 32px; /* Adjust as needed */\n    height: 32px;\n    margin-bottom: 5px;\n}\n\n/* Hidden buttons */\n.hidden {\n    visibility: hidden; /* Use visibility instead of display */\n    opacity: 0;\n}\n\n.icon-button.fade-in {\n    visibility: visible; /* Make the button visible */\n    opacity: 0; /* Start faded out */\n    animation: fadeIn 0.5s forwards; /* Fade-in animation */\n}\n\n/* Keyframes for fadeIn */\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n\n/* Main content area */\n.content {\n    flex: 1;\n    background-color: #f4f4f4;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n/* Main display area */\n.main-display {\n    width: 80%;\n    height: 80%;\n    background-color: #fff;\n    border: 1px solid #ccc;\n    border-radius: 15px;\n    margin-top: 20px;\n}\n"
        },
        "Styles\\rightPanelStyle.css": {
            "methods": [],
            "code": "/* Right Panel Styling */\n.right-panel {\n    width: 200px;\n    background-color: #333;\n    color: white;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: start;\n    box-shadow: -4px 0px 10px rgba(0, 0, 0, 0.3);\n}\n\n/* Custom Vertical Slider */\n.custom-vertical-slider {\n    height: calc(100vh - 100px); /* Stretch to fit available height */\n    width: 20px;\n    position: relative;\n    margin: 20px 0;\n}\n\n.slider-track {\n    width: 100%;\n    height: 100%;\n    background-color: #888;\n    position: relative;\n    border-radius: 10px;\n}\n\n.slider-thumb {\n    width: 20px;\n    height: 20px;\n    background-color: #555;\n    border-radius: 50%;\n    position: absolute;\n    left: 0;\n    cursor: pointer;\n}\n"
        }
    }
}